package com.craft.demo.url.operations.controller;

import com.craft.demo.commons.enums.ResponseStatus;
import com.craft.demo.commons.utils.BasicOperationsUtils;
import com.craft.demo.url.operations.dto.requests.ShorteningUrlRequestDto;
import com.craft.demo.url.operations.dto.response.UrlApiResponseDto;
import com.craft.demo.url.operations.service.UrlShorteningService;
import com.craft.demo.url.operations.utils.UrlOperationsUtils;
import io.swagger.annotations.ApiParam;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.util.Pair;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.view.RedirectView;

import java.util.List;

@RestController
@RequestMapping(value = "/url/operations/v1/shortener")
@Slf4j
public class UrlShorteningController {

    @Autowired
    private UrlShorteningService urlShorteningService;
    @Autowired
    private UrlOperationsUtils urlOperationsUtils;
    @Autowired
    private BasicOperationsUtils basicOperationsUtils;


    /**
     * @param shorteningUrlRequestDto - LongUrl, ExpirationTime, Customisation
     * @return String - response msg against input
     */
    @PostMapping("/shortenUrl")
    public ResponseEntity<String> shortenUrl(@RequestBody @Validated ShorteningUrlRequestDto shorteningUrlRequestDto) {

        //Basic Validation checks
        if (shorteningUrlRequestDto.getExpirationTime() < 1) {
            log.error("Expiration time should be at-least 1");
            return ResponseEntity
                    .status(HttpStatus.BAD_REQUEST)
                    .body("Expiration time should be at-least 1");
        }
        if (Boolean.FALSE.equals(urlOperationsUtils.isValidCustomisation(shorteningUrlRequestDto.getCustomizeUrl()))) {
            log.error("Not a valid customisation, Alphabets, Digits, '_', '-' are only allowed. Size allowed is between 5 and 10");
            return ResponseEntity
                    .status(HttpStatus.BAD_REQUEST)
                    .body("Not a valid customisation, Alphabets, Digits, '_', '-' are only allowed. Size allowed is between 5 and 10");
        }

        UrlApiResponseDto shorteningResponse = urlShorteningService.shortenUrl(shorteningUrlRequestDto);

        if (shorteningResponse.getResponseStatus().equals(ResponseStatus.FAILURE)) {
            return ResponseEntity
                    .status(HttpStatus.OK)
                    .body(shorteningResponse.getResponseMsg());
        }
        //Shortened URL is created
        return ResponseEntity
                .status(HttpStatus.CREATED)
                .body(shorteningResponse.getResponseMsg() + " \nThe required output : " + shorteningResponse.getUrlReceived());
    }

    /**
     * @param shortUrl - Short URL generated by system earlier
     * @return String - response msg against input
     */
    @GetMapping("/fetchLongUrl")
    public String fetchLongUrl(@RequestParam String shortUrl) {

        UrlApiResponseDto fetchMappingResponse = urlShorteningService.fetchLongUrl(shortUrl);

        if (fetchMappingResponse.getResponseStatus().equals(ResponseStatus.FAILURE)) {
            return fetchMappingResponse.getResponseMsg();
        }
        return fetchMappingResponse.getResponseMsg() + " \nThe required output : " + fetchMappingResponse.getUrlReceived();

    }

    /**
     * @return List<Pair < String, String>> - List of mappings of short and long Urls as present in system
     */
    @GetMapping("fetchAllShorts")
    public List<Pair<String, String>> fetchAllShortUrls() {

        return urlShorteningService.fetchAllShortUrls();
    }

    /**
     * @param shortUrl - Short URL generated by system earlier
     * @return RedirectView - To redirect against provided input
     */
    @GetMapping("/redirect")
    public ResponseEntity<RedirectView> redirectUrl(@RequestParam String shortUrl) {
        String receivedRedirectUrl = urlShorteningService.redirectUrl(shortUrl);

        log.info("Trying to redirect to: {}", receivedRedirectUrl);
        return urlOperationsUtils.redirectionToUrl(receivedRedirectUrl);
    }

    /**
     * @param shortUrl - Short URL generated by system earlier
     * @return Integer - Number of redirections, so far against input
     */
    @GetMapping("/fetchHits")
    public Integer fetchNumberOfHits(@RequestParam String shortUrl) {

        return urlShorteningService.fetchStatsForUrl(shortUrl);
    }

    /**
     * @param shortUrl - Short URL generated by system earlier
     * @return Boolean - Whether deletion was successful or not
     */
    @DeleteMapping("/deleteUrl")
    public Boolean deleteShortUrl(@RequestParam String shortUrl,
                                  @RequestParam String userName,
                                  @RequestParam @ApiParam(format = "password") String passWord) {

        //Extra verification check for deletion
        if (Boolean.FALSE.equals(basicOperationsUtils.verifyUserNameAndPassword(userName, passWord))) {
            return Boolean.FALSE;
        }

        UrlApiResponseDto shorteningResponse = urlShorteningService.deleteUrl(shortUrl);

        if (shorteningResponse.getResponseStatus().equals(ResponseStatus.FAILURE)) {
            return Boolean.FALSE;
        }
        return Boolean.TRUE;
    }

}
